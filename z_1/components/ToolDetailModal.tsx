"use client";

import React, { useState } from "react";
import {
  ChevronLeft,
  Heart,
  ExternalLink,
  AlertCircle,
  CheckCircle,
  XCircle,
  Info,
  Bot,
  FileText,
  PlayCircle,
  Settings,
  Code,
  Globe,
  MessageSquare,
} from "lucide-react";
import type { Tool } from "../types";
import { TemplateManager } from "../lib/templateManager";
import { LearningGuideDetail } from "./LearningGuideDetail";
import { CommentModal } from "./CommentModal";
import { ZenoAsset } from "../types/config";

interface ToolDetailPageProps {
  tool: Tool;
  onBack: () => void;
  onFavorite?: (toolId: string) => void;
  isFavorite?: boolean;
  onCategoryClick?: (category: string) => void;
  onTagClick?: (tag: string) => void;
}

const ToolDetailPage: React.FC<ToolDetailPageProps> = ({
  tool,
  onBack,
  onFavorite,
  isFavorite = false,
  onCategoryClick,
  onTagClick,
}) => {
  // Route to appropriate template based on tool type
  if (TemplateManager.isLearningContent(tool)) {
    return (
      <LearningGuideDetail
        tool={tool}
        onBack={onBack}
        onFavorite={onFavorite}
        isFavorite={isFavorite}
      />
    );
  }

  // Fall back to standard template for other types
  const [message, setMessage] = useState<{
    text: string;
    type: "success" | "error";
  }>({ text: "", type: "success" });

  const [isCommentModalOpen, setIsCommentModalOpen] = useState(false);

  const displayMessage = (text: string, type: "success" | "error") => {
    setMessage({ text, type });
    setTimeout(() => setMessage({ text: "", type: "success" }), 3000);
  };

  const handleRequestAccess = () => {
    console.log(`Access request for tool: ${tool.title}`);
    displayMessage(
      "Access request sent to consultants! (Simulated)",
      "success"
    );
  };

  const handleFeedback = (helpful: boolean) => {
    console.log(`Feedback for tool: ${tool.title} - Helpful: ${helpful}`);
    displayMessage(
      `Feedback recorded: ${helpful ? "Helpful!" : "Not helpful."} (Simulated)`,
      "success"
    );
  };

  const handleCommentSubmit = async (comment: {
    name: string;
    message: string;
    priority: string;
  }) => {
    try {
      const response = await fetch("/api/comments", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          toolId: tool.id,
          name: comment.name,
          message: comment.message,
          priority: comment.priority,
        }),
      });

      if (response.ok) {
        displayMessage(
          "Comment submitted successfully! Thank you for your feedback.",
          "success"
        );
      } else {
        throw new Error("Failed to submit comment");
      }
    } catch (error) {
      console.error("Error submitting comment:", error);
      displayMessage("Failed to submit comment. Please try again.", "error");
    }
  };

  const isSpecialist = tool.tier === "Specialist";

  // Icon mapping for different tool types
  const getTypeIcon = (type: string) => {
    switch (type) {
      case "GPT":
        return <Bot size={20} className="text-blue-600" />;
      case "Doc":
        return <FileText size={20} className="text-green-600" />;
      case "Video":
        return <PlayCircle size={20} className="text-red-600" />;
      case "Script":
        return <Code size={20} className="text-purple-600" />;
      case "Platform":
        return <Globe size={20} className="text-indigo-600" />;
      case "Tool":
        return <Settings size={20} className="text-orange-600" />;
      default:
        return <Info size={20} className="text-gray-500" />;
    }
  };

  // Get action button text based on tool type
  const getActionButtonText = (type: string) => {
    switch (type) {
      case "GPT":
        return "Open GPT";
      case "Doc":
        return "Download Document";
      case "Video":
        return "Watch Video";
      case "Script":
        return "View Script";
      case "Platform":
        return "Visit Platform";
      case "Tool":
        return "Use Tool";
      default:
        return "View Resource";
    }
  };

  // Get specific caveats based on tool type
  const getTypeCaveats = (type: string) => {
    const baseCaveats = [
      "Always verify information generated by AI tools",
      "Do not input sensitive client data without approval",
      "Cross-reference data with reliable sources",
    ];

    const typeCaveats: Record<string, string[]> = {
      GPT: [
        ...baseCaveats,
        "Mind hallucinations: GPTs can generate plausible but incorrect information",
        "Experiment with prompt engineering for better results",
        "Be specific in your prompts for more accurate outputs",
      ],
      Doc: [
        ...baseCaveats,
        "Ensure you have the latest version of the document",
        "Check document permissions and access requirements",
        "Review document content for relevance to your specific use case",
      ],
      Video: [
        ...baseCaveats,
        "Video content may become outdated - check publication date",
        "Take notes on key points for future reference",
        "Practice along with tutorial videos for better retention",
      ],
      Script: [
        ...baseCaveats,
        "Review and understand script code before execution",
        "Test scripts in safe environments first",
        "Ensure you have necessary permissions to run scripts",
      ],
      Platform: [
        ...baseCaveats,
        "Check platform terms of service and pricing",
        "Understand data privacy and security implications",
        "Ensure platform integrates with your existing workflow",
      ],
      Tool: [
        ...baseCaveats,
        "Understand tool limitations and appropriate use cases",
        "Check for regular updates and maintenance",
        "Ensure tool compatibility with your systems",
      ],
    };

    return typeCaveats[type] || baseCaveats;
  };

  if (!tool) {
    return (
      <div className="container mx-auto p-6 text-center text-gray-600">
        <p>No tool selected. Please go back to the homepage.</p>
        <button
          onClick={onBack}
          className="mt-4 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
        >
          Go Back
        </button>
      </div>
    );
  }

  return (
    <div className="bg-gray-50 min-h-full">
      <div className="container mx-auto">
        {/* Main Tool Details Card */}
        <div className="bg-white rounded-xl shadow-lg p-8 border border-gray-200 zeno-content-padding">
          {/* Header with Title and Favorite */}
          <div className="flex justify-between items-start mb-6">
            <div className="flex items-start space-x-4">
              {getTypeIcon(tool.type)}
              <div>
                <h2 className="zeno-heading text-4xl font-extrabold text-gray-900">
                  {tool.title}
                </h2>
                <div className="flex items-center space-x-2 mt-2">
                  <span className="zeno-body text-sm text-gray-500">
                    Type: {tool.type}
                  </span>
                  <span className="text-gray-300">â€¢</span>
                  <span className="zeno-body text-sm text-gray-500">
                    Function: {tool.function}
                  </span>
                </div>
              </div>
            </div>
            {onFavorite && (
              <button
                onClick={() => onFavorite(tool.id)}
                className={`p-3 rounded-full transition-colors duration-200 ${
                  isFavorite
                    ? "text-red-500 bg-red-100"
                    : "text-gray-400 hover:text-red-500 hover:bg-gray-100"
                }`}
                aria-label={
                  isFavorite ? "Remove from favorites" : "Add to favorites"
                }
              >
                <Heart fill={isFavorite ? "currentColor" : "none"} size={28} />
              </button>
            )}
          </div>

          {/* Description */}
          <p className="zeno-body text-gray-700 text-lg mb-6 leading-relaxed">
            {tool.description}
          </p>

          {/* Type Metadata */}
          <div className="flex flex-wrap gap-3 mb-4 items-center">
            {tool.type && (
              <>
                <span className="zeno-body font-semibold">Type:</span>
                <button
                  className="bg-blue-50 text-blue-700 text-sm px-4 py-2 rounded-full font-medium hover:bg-blue-100 transition-colors"
                  onClick={() =>
                    typeof onTagClick === "function"
                      ? onTagClick(tool.type)
                      : console.log("Type clicked:", tool.type)
                  }
                  type="button"
                >
                  {tool.type}
                </button>
              </>
            )}
          </div>
          {/* Tags and Categories Metadata */}
          <div className="flex flex-wrap gap-3 mb-8 items-center">
            {tool.categories && tool.categories.length > 0 && (
              <span className="zeno-body font-semibold mr-2">Categories:</span>
            )}
            {tool.categories &&
              tool.categories.length > 0 &&
              tool.categories
                .filter(
                  (category): category is string => typeof category === "string"
                )
                .map((category) => (
                  <button
                    key={category}
                    className="bg-green-50 text-green-700 text-sm px-4 py-2 rounded-full font-medium hover:bg-green-100 transition-colors"
                    onClick={() =>
                      typeof onCategoryClick === "function"
                        ? onCategoryClick(category)
                        : console.log("Category clicked:", category)
                    }
                    type="button"
                  >
                    {category}
                  </button>
                ))}
            {tool.tags &&
              tool.tags.length > 0 &&
              tool.tags
                .filter((tag): tag is string => typeof tag === "string")
                .map((tag) => (
                  <button
                    key={tag}
                    className="bg-blue-50 text-blue-700 text-sm px-4 py-2 rounded-full font-medium hover:bg-blue-100 transition-colors"
                    onClick={() =>
                      typeof onTagClick === "function"
                        ? onTagClick(tag)
                        : console.log("Tag clicked:", tag)
                    }
                    type="button"
                  >
                    {tag}
                  </button>
                ))}
            {tool.tier && (
              <span
                className={`text-sm px-4 py-2 rounded-full font-medium ${
                  tool.tier === "Specialist"
                    ? "bg-yellow-100 text-yellow-700"
                    : "bg-green-100 text-green-700"
                }`}
              >
                {tool.tier}
              </span>
            )}
            {tool.complexity && (
              <span className="bg-gray-100 text-gray-700 text-sm px-4 py-2 rounded-full font-medium">
                Complexity: {tool.complexity}
              </span>
            )}
          </div>

          {/* Access Control or Action Button */}
          {isSpecialist ? (
            <div className="bg-yellow-50 border border-yellow-300 text-yellow-800 p-6 rounded-lg mb-8 flex items-start shadow-inner">
              <AlertCircle
                className="mr-3 text-yellow-600 mt-1 flex-shrink-0"
                size={24}
              />
              <div className="flex-1">
                <p className="font-semibold text-lg mb-2">
                  Specialist Tool - Access Restricted
                </p>
                <p className="mb-4">
                  This tool requires specialist consultation. Click below to
                  request access and a team member will reach out to you.
                </p>
                <button
                  onClick={handleRequestAccess}
                  className="bg-yellow-600 text-white px-6 py-3 rounded-lg hover:bg-yellow-700 transition-colors duration-300 shadow-md focus:outline-none focus:ring-2 focus:ring-yellow-500"
                >
                  Request Access
                </button>
              </div>
            </div>
          ) : (
            <div className="mb-8">
              <a
                href={tool.url}
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center bg-blue-600 text-white px-8 py-4 rounded-lg text-lg font-semibold hover:bg-blue-700 transition-colors duration-300 shadow-xl transform hover:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-blue-600"
              >
                {getActionButtonText(tool.type)}
                <ExternalLink className="ml-3" size={24} />
              </a>
            </div>
          )}

          {/* Type-Specific Caveats & Best Practices */}
          <div className="bg-green-50 border border-green-200 text-green-900 p-6 rounded-lg mb-8 shadow-inner">
            <div className="flex items-start">
              <CheckCircle
                className="mr-3 text-green-600 mt-1 flex-shrink-0"
                size={24}
              />
              <div className="flex-1">
                <p className="zeno-heading font-semibold text-lg mb-3">
                  Tips for Getting the Best Results:
                </p>
                <ul className="zeno-body list-disc list-inside space-y-2">
                  {getTypeCaveats(tool.type).map((caveat, index) => (
                    <li key={index} className="text-sm leading-relaxed">
                      {caveat}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>

          {/* Additional Tool Information */}
          {tool.date_added && (
            <div className="bg-gray-50 border border-gray-200 p-4 rounded-lg mb-8">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                <div>
                  <span className="font-medium text-gray-700">Added:</span>
                  <span className="ml-2 text-gray-600">
                    {new Date(tool.date_added).toLocaleDateString()}
                  </span>
                </div>
                {tool.added_by && (
                  <div>
                    <span className="font-medium text-gray-700">Added by:</span>
                    <span className="ml-2 text-gray-600">{tool.added_by}</span>
                  </div>
                )}
                {tool.scheduled_feature_date && (
                  <div>
                    <span className="font-medium text-gray-700">
                      Featured on:
                    </span>
                    <span className="ml-2 text-gray-600">
                      {new Date(
                        tool.scheduled_feature_date
                      ).toLocaleDateString()}
                    </span>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Message Display */}
          {message.text && (
            <div
              className={`fixed bottom-8 right-8 p-4 rounded-lg shadow-xl text-white flex items-center z-50 ${
                message.type === "success" ? "bg-green-600" : "bg-red-600"
              }`}
            >
              {message.type === "success" ? (
                <CheckCircle className="mr-2" />
              ) : (
                <XCircle className="mr-2" />
              )}
              {message.text}
            </div>
          )}

          {/* Comment Modal */}
          <CommentModal
            isOpen={isCommentModalOpen}
            onClose={() => setIsCommentModalOpen(false)}
            onSubmit={handleCommentSubmit}
            toolId={tool.id}
            toolTitle={tool.title}
          />
        </div>
      </div>
    </div>
  );
};

export { ToolDetailPage };
export default ToolDetailPage;
